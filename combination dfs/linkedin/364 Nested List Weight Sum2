# """
# This is the interface that allows for creating nested lists.
# You should not implement it, or speculate about its implementation
# """
#class NestedInteger(object):
#    def __init__(self, value=None):
#        """
#        If value is not specified, initializes an empty list.
#        Otherwise initializes a single integer equal to value.
#        """
#
#    def isInteger(self):
#        """
#        @return True if this NestedInteger holds a single integer, rather than a nested list.
#        :rtype bool
#        """
#
#    def add(self, elem):
#        """
#        Set this NestedInteger to hold a nested list and adds a nested integer elem to it.
#        :rtype void
#        """
#
#    def setInteger(self, value):
#        """
#        Set this NestedInteger to hold a single integer equal to value.
#        :rtype void
#        """
#
#    def getInteger(self):
#        """
#        @return the single integer that this NestedInteger holds, if it holds a single integer
#        Return None if this NestedInteger holds a nested list
#        :rtype int
#        """
#
#    def getList(self):
#        """
#        @return the nested list that this NestedInteger holds, if it holds a nested list
#        Return None if this NestedInteger holds a single integer
#        :rtype List[NestedInteger]
#        """

class Solution(object):
    def depthSumInverse(self, nestedList):
        """
        :type nestedList: List[NestedInteger]
        :rtype: int
        """
        import collections
        if not nestedList or len(nestedList) == 0:
            return 0
        queue = collections.deque(nestedList)
        sum_list = []
        while queue:
            level_sum = 0
            for _ in range(len(queue)):
                n = queue.popleft()
                if n.isInteger():
                    level_sum += n.getInteger()
                else:
                    nl = n.getList()
                    while nl:
                        queue.append(nl.pop())
            sum_list.append(level_sum)
        total_depth = len(sum_list)
        sums = 0
        for i, v in enumerate(sum_list):
            depth = total_depth - i
            sums += depth * v
        return sums

            

