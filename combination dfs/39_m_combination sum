class Solution(object):
    def combinationSum(self, candidates, target):
        """
        :type candidates: List[int]
        :type target: int
        :rtype: List[List[int]]
        """
        if not candidates:
            return []
        res = []
        candidates = sorted(candidates)
        self.dfs(candidates, target, [], 0, res)
        return res
    
    def dfs(self, candidates, target, curr, index, res):
        if target == 0:
            #deep copy
            res.append(curr[:])
            return
        for i in range(index, len(candidates)):
            if candidates[i] > target:
                return
            #[1] -> [1,2]
            curr.append(candidates[i])
            #serach start from [1,2]
            #from i not i+1, because it self can be counted unlimited time from list
            self.dfs(candidates, target - candidates[i], curr, i, res)
            #[1,2] -> [1] the number that be added before need to be removed
            curr.pop()