class Solution(object):
    def addOperators(self, num, target):
        """
        :type num: str
        :type target: int
        :rtype: List[str]
        """
        res = []
        self.target = target
        for i in range(1, len(num)+ 1):
            if i == 1 or (i > 1 and num[0] != '0'):# prevent 00
                self.dfs(num[i:], num[:i], int(num[:i]), int(num[:i]), res)
        return res

    def dfs(self, num, temp, curr, prev, res):
        if not num:
            if curr == self.target:
                res.append(temp)
            return 
        for i in range(1, len(num)+ 1):
            val = num[:i]
            if i == 1 or (i > 1 and num[0] != '0'):
                self.dfs(num[i:], temp+'+'+val, curr + int(val), int(val), res)
                self.dfs(num[i:], temp+'-'+val, curr - int(val), -int(val), res)
                self.dfs(num[i:], temp + '*' + val, curr - prev + prev*int(val), prev*int(val), res)
