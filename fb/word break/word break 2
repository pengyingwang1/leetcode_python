class Solution(object):
    def wordBreak(self, s, wordDict):
        """
        :type s: str
        :type wordDict: List[str]
        :rtype: List[str]
        """
        if not s:
            return []
        return self.dfs(s, wordDict, {})
    def dfs(self,s, wordDict, memo):
        if s in memo:
            return memo[s]
        if len(s) == 0:
            return []
        partitions = []
        for i in range(1, len(s)):
            prefix = s[:i]
            if prefix not in wordDict:
                continue
            subpartitions = self.dfs(s[i:], wordDict, memo)
            for partition in subpartitions:
                partitions.append(prefix +" " +  partition)
        if s in wordDict:
            partitions.append(s)
        memo[s] = partitions
        return partitions