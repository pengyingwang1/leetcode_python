#顺序变
import collections
class Solution(object):
    def leastInterval(self, tasks, n):
        """
        :type tasks: List[str]
        :type n: int
        :rtype: int
        """
        task_count = collections.Counter(tasks).values()
        max_task = max(task_count)
        #重复的元素类型个数 AB__AB__AB__AB
        mct = task_count.count(max_task)
        return max(len(tasks), (max_task -1)*(n+1) + mct)
 #顺序不变，只插 cooling time
class New_solution(object):
    def leastInterval1(self, tasks, k):
        """
        if cooling time is long and n is small
        using map
        """
 
        dic = {}
        time = 1
        for task in tasks:
            if task in dic:
                last_time = dic[task]
                time = max(time + 1, last_time + k + 1)
            else:
                time += 1
            dic[task] = time
        return time

    print(taskSchedule("ABBABBC",2))



