"""
# Definition for a Node.
class Node(object):
    def __init__(self, val, prev, next, child):
        self.val = val
        self.prev = prev
        self.next = next
        self.child = child
"""
class Solution(object):
    def flatten(self, head):
        """
        :type head: Node
        :rtype: Node
        """
        curr, temp = head, []
        while curr:
            if curr.child:
                if curr.next:
                    temp.append(curr.next)
                curr.next = curr.child
                curr.child.prev = curr
                curr.child = None
            if temp and not curr.next:
                node = temp.pop()
                curr.next = node
                node.prev = curr
            curr = curr.next
        return head
"""
temp: store next temporality
if come to the end of child.next, pop temp and connect with it
change next prev child 
from bottom to top, do not need to consider child
Time: O(n)
Space: O(1)
"""